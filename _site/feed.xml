<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>handsameliu</title>
    <description>工作五年的初级程序员，自认为拥有小小的帅气，请多指教</description>
    <link>/jekyll_blog/</link>
    <atom:link href="/jekyll_blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 17 Nov 2017 15:36:18 +0800</pubDate>
    <lastBuildDate>Fri, 17 Nov 2017 15:36:18 +0800</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>编写vue插件并上传到npm</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/handsameliu/vue-simple-calendar&quot;&gt;https://github.com/handsameliu/vue-simple-calendar&lt;/a&gt;  欢迎start，如果有问题，可以提issues。&lt;/p&gt;

&lt;p&gt;以下是过程中遇到的问题。记录下来，以免再犯。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;1、&lt;code class=&quot;highlighter-rouge&quot;&gt;npm adduser&lt;/code&gt; 是注册。如果已经有npmjs的账号了那就直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm login&lt;/code&gt;。（退出使用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm logout&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;2、使用前一定要确认连接的镜像是官方的而不是淘宝的。
	获取当前镜像地址 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm get registry&lt;/code&gt;
	切换到官方 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set registry https://registry.npmjs.org&lt;/code&gt;
	切换到淘宝 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set registry http://registry.npm.taobao.org&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、在pulish前一定要确认，你所构建的项目名称是否有重复。如果有重复马上换掉。否则会报403错误。解决方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;重命名package.json中的name&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm publish
npm ERR! publish Failed PUT 403
npm ERR! Windows_NT 10.0.15063
npm ERR! argv &quot;E:\\nodejs\\node.exe&quot; &quot;E:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js&quot; &quot;publish&quot;
npm ERR! node v6.11.0
npm ERR! npm  v3.10.10
npm ERR! code E403

npm ERR! You do not have permission to publish &quot;vue-simple-calendar&quot;. Are you logged in as the correct user? : vue-simple-calendar
npm ERR!
npm ERR! If you need help, you may report this error at:
npm ERR!     &amp;lt;https://github.com/npm/npm/issues&amp;gt;

npm ERR! Please include the following file with any support request:
npm ERR!     E:\words_liu\vue-simple-calendar\npm-debug.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至于如何编写及发布插件到npm参考这个就可以了。主要关注发布流程即可。&lt;a href=&quot;http://www.imooc.com/article/19691&quot;&gt;http://www.imooc.com/article/19691&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Nov 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/11/17/goToNPMIssues/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/11/17/goToNPMIssues/</guid>
        
        <category>总结</category>
        
        <category>Vue2</category>
        
        <category>vue-cli</category>
        
        <category>NPM</category>
        
        <category>webPack</category>
        
        
      </item>
    
      <item>
        <title>v-charts图标</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;由于项目需要，用到了图表，虽然echarts已经有vue版了，但还是略复杂，正好找到了饿了么的组件库，所以记录一下，绝对是&lt;code class=&quot;highlighter-rouge&quot;&gt;极其&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;极其&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;极其&lt;/code&gt; 简单的一个图标封装插件。只要数据格式正确，秒出图表&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;—— &lt;a href=&quot;https://github.com/ElemeFE/v-charts&quot;&gt;V-Charts&lt;/a&gt;
 —— &lt;a href=&quot;https://elemefe.github.io/v-charts/#/&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i v-charts -S
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;我所使用的是单页性质的，所以选择按需安装，也可以统一加入到vue实例中。 下面以折线图为例。具体可以到官网上找，文档也非常简洁明了
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;单条折线图&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lineChartData&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ve-line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;多条折线图&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dbLineChartData&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chartSettings&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ve-line&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/template&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VeLine&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'v-charts/lib/line'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 折线图&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'line'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;chartSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// 图表设置&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// area: true, // 线条堆叠面积背景色&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// labelMap: { // 替换展示名称,需要和数据中的key一一对应&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//     hei: '高压',&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//     low: '低压'&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// },&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// metrics: ['hei', 'low'], // 展示的指标&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// dimension: ['日期'],      // 展示x轴数据的维度&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// label: { // 在xy轴交汇节点上直接显示数值&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//     normal: {&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//         show: true&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//     }&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;lineChartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 单条折线图&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月1日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月2日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1223&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月3日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月4日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月5日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月6日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月7日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7124&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月8日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7125&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月9日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7126&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月10日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月11日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月12日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月13日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月14日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月15日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1月16日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'销售量'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;dbLineChartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'low'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// 只要键值对对上即可，内容是啥不重要&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2017年10月11日14:41:24'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'140'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'low'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'96'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2017年10月12日14:41:24'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'120'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'low'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'126'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2017年10月13日14:41:24'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'110'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'low'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'86'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2017年10月14日14:41:24'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'160'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'low'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'116'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2017年10月15日14:41:24'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'120'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'low'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'76'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日期'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2017年10月16日14:41:24'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'130'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'low'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'66'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VeLine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/style&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 12 Oct 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/10/12/eleme-v-charts/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/10/12/eleme-v-charts/</guid>
        
        <category>vue</category>
        
        <category>v-charts</category>
        
        
      </item>
    
      <item>
        <title>25个js面试题</title>
        <description>&lt;p&gt;http://blog.csdn.net/fengyinchao/article/details/50456497   可参考这篇文章，比我写的好&lt;/p&gt;

&lt;p&gt;https://mp.weixin.qq.com/s/qdn_13vADwl56wNRXz4m-w  我参考的是这篇，有些题都不全&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、使用 typeof bar === “object” 来确定 bar 是否是对象的潜在陷阱是什么？如何避免这个陷阱？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果bar是null的话 结果也是正确的，因为null也是object，而object.prototype也是null&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2、以下的输出是什么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a defined? &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b defined? &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	a defined? false
	b defined? true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为只有变量a被直接声明，变量b时没有被声明，那么在非严格模式下b就是一个全局变量了(严格模式下这种赋值是错误的，直接报错)。而a所在的函数又被自运行函数包裹，所以由于作用域原因a是无法获取到的，即为undefined。&lt;/p&gt;

&lt;p&gt;而且此处的连续赋值&lt;code class=&quot;highlighter-rouge&quot;&gt;var a = b = 3;&lt;/code&gt;并非是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var b = 3;
var a = b;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b = 3;   var a = b;
(严格模式下这种赋值是错误的，直接报错)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;3、下面的代码将输出什么到控制台，为什么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
	&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       
	&lt;span class=&quot;na&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;           
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outer func:  this.foo = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outer func:  self.foo = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inner func:  this.foo = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;               
			&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inner func:  this.foo = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;               
			&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inner func:  self.foo = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           
		&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出结果为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;outer func:  this.foo = bar
outer func:  self.foo = bar
inner func:  this.foo = undefined
inner func:  self.foo = bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这道题也是作用域问题。首先，在调用myObject.func()时，其方法的this便指向了myObject自身的this。再有方法func中一开始就声明了一个self的变量，将this赋值给了self。自然前两个输出的结果肯定是一样的。代码继续向下运行是一个代码块，这个代码块本身是一个自运行函数，这就可想而知了，又是代码块又是自运行函数，他的this肯定被隔离了，此时自运行函数的this是指向自己的，所以第三个输出就是undefined，第四个输出由于使用了self变量所以还是可以正常输出。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4、封装JavaScript源文件的全部内容到一个函数块有什么意义及理由？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到这个问题，第一个想到的就是防止变量污染，设立一个独立的作用域（独立的命名空间）后，不管是this还是变量名就都是当前作用域下的，不会受到其他文件内变量名冲突的影响。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;5、在JavaScript源文件的开头包含 use strict 有什么意义和好处？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;use strict代表当前文件采用的是严格模式加载和运行，防止未经声明的全局变量，this指向当前作用域，如果this中的属性没有就会报错，这样有利于提高编写代码人员的技术水品，杜绝代码错误及瑕疵。&lt;/p&gt;

&lt;p&gt;严格模式的一些主要优点包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使调试更加容易。那些被忽略或默默失败了的代码错误，会产生错误或抛出异常，因此尽早提醒你代码中的问题，你才能更快地指引到它们的源代码。&lt;/li&gt;
  &lt;li&gt;防止意外的全局变量。如果没有严格模式，将值分配给一个未声明的变量会自动创建该名称的全局变量。这是JavaScript中最常见的错误之一。在严格模式下，这样做的话会抛出错误。&lt;/li&gt;
  &lt;li&gt;消除 this 强制。如果没有严格模式，引用null或未定义的值到 this 值会自动强制到全局变量。这可能会导致许多令人头痛的问题和让人恨不得拔自己头发的bug。在严格模式下，引用 null或未定义的 this 值会抛出错误。&lt;/li&gt;
  &lt;li&gt;不允许重复的属性名称或参数值。当检测到对象（例如，var object = {foo: “bar”, foo: “baz”};）中重复命名的属性，或检测到函数中（例如，function foo(val1, val2, val1){}）重复命名的参数时，严格模式会抛出错误，因此捕捉几乎可以肯定是代码中的bug可以避免浪费大量的跟踪时间。&lt;/li&gt;
  &lt;li&gt;使eval() 更安全。在严格模式和非严格模式下，eval() 的行为方式有所不同。最显而易见的是，在严格模式下，变量和声明在 eval() 语句内部的函数不会在包含范围内创建（它们会在非严格模式下的包含范围中被创建，这也是一个常见的问题源）。&lt;/li&gt;
  &lt;li&gt;在 delete使用无效时抛出错误。delete操作符（用于从对象中删除属性）不能用在对象不可配置的属性上。当试图删除一个不可配置的属性时，非严格代码将默默地失败，而严格模式将在这样的情况下抛出异常。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;6、考虑以下两个函数。它们会返回相同的东西吗？ 为什么相同或为什么不相同？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;         
		&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;     
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;     
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;         
		&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;     
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo1 returns:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo2 returns:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这题我输出的结果是正常的。。。。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;foo1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;7、NaN 是什么？它的类型是什么？你如何可靠地测试一个值是否等于 NaN ？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NaN代表这不是一个数字，但他是一个数字类型。一般是非数字类型使用数字运算才会返回此类型。NaN===NaN的结果是false，这是肯定的因为从字面意思看非数字怎么可能等于非数字呢？天知道这个非数字到底是个啥。。。我们一般使用isNaN()来检测是否为NaN。另外，ES6提供了一个新的 Number.isNaN() 函数，这是一个不同的函数，并且比老的全局 isNaN() 函数更可靠。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;8、下列代码将输出什么？并解释原因。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一眼看到这题想到的就是js浮点型运算的问题了，因为js浮点型运行会出现浮点精度问题&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;结果是：0.30000000000000004   false
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;9、讨论写函数 isInteger(x) 的可能方法，用于确定x是否是整数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想到的解决方法如同源网页作者给出的结果，但是代码还是写多了一点&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 作者给出的最稳健的方法 位运算&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 并不优雅但是同样能算出的方法 四舍五入&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Math.ceil() 和 Math.floor() 在上面的实现中等同于 Math.round()。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 第三种方式 取余&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 不正确的方式&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 虽然这个以 parseInt函数为基础的方法在 x 取许多值时都能工作良好，但一旦 x 取值相当大的时候，就会无法正常工作。问题在于 parseInt() 在解析数字之前强制其第一个参数到字符串。因此，一旦数目变得足够大，它的字符串就会表达为指数形式（例如， 1e+21）。因此，parseInt() 函数就会去解析 1e+21，但当到达 e字符串的时候，就会停止解析，因此只会返回值 1。注意：&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000000000000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'1e+21'&lt;/span&gt;   
&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000000000000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   
&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000000000000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000000000000000&lt;/span&gt;   
&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 我写出的方法，并不优雅&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp 顺便补了补运算符
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;10、下列代码行1-4如何排序，使之能够在执行代码时输出到控制台？ 为什么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function() {       
	console.log(1);
	setTimeout(function(){
		console.log(2);
	},1000);
	setTimeout(function(){
		console.log(3);
	}, 0);
	console.log(4);
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一眼看到后反应是1432，因为使用setTimeout后就进入了异步队列，在函数中的1和4就被输出了，而2和3就会延迟输出了，3所在的定时器延迟是0秒，所以3先输出。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;要回答这个问题，你需要正确理解JavaScript的事件和时间设置。

浏览器有一个事件循环，会检查事件队列和处理未完成的事件。例如，如果时间发生在后台（例如，脚本的 onload 事件）时，浏览器正忙（例如，处理一个 onclick），那么事件会添加到队列中。当onclick处理程序完成后，检查队列，然后处理该事件（例如，执行 onload 脚本）。

同样的， setTimeout() 也会把其引用的函数的执行放到事件队列中，如果浏览器正忙的话。

当setTimeout()的第二个参数为0的时候，它的意思是“尽快”执行指定的函数。具体而言，函数的执行会放置在事件队列的下一个计时器开始。但是请注意，这不是立即执行：函数不会被执行除非下一个计时器开始。这就是为什么在上述的例子中，调用 console.log(4) 发生在调用 console.log(3) 之前（因为调用 console.log(3) 是通过setTimeout被调用的，因此会稍微延迟）。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;11、写一个简单的函数（少于80个字符），要求返回一个布尔值指明字符串是否为回文结构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 回文结构是顺读和反读都一样的序列&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/W/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// logs 'true'   &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;levels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// logs 'false'   &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A car, a man, a maraca&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// logs 'true'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;12、写一个 sum方法，在使用下面任一语法调用时，都可以正常工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;幸好之前看过一篇关于柯理化函数的文章，所以看到这题还是有思路的，但是第一次写失败了。这里就不上代码了，因为和方法1是一样的。。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 方法1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;     
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
		&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;     
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在JavaScript中，函数可以提供到 arguments 对象的访问，arguments 对象提供传递到函数的实际参数的访问。这使我们能够使用 length 属性来确定在运行时传递给函数的参数数量。

如果传递两个参数，那么只需加在一起，并返回。

否则，我们假设它被以 sum(2)(3)这样的形式调用，所以我们返回一个匿名函数，这个匿名函数合并了传递到 sum()的参数和传递给匿名函数的参数。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 方法2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
		&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;     
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;当调用一个函数的时候，JavaScript不要求参数的数目匹配函数定义中的参数数量。如果传递的参数数量大于函数定义中参数数量，那么多余参数将简单地被忽略。另一方面，如果传递的参数数量小于函数定义中的参数数量，那么缺少的参数在函数中被引用时将会给一个 undefined值。所以，在上面的例子中，简单地检查第2个参数是否未定义，就可以相应地确定函数被调用以及进行的方式。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;13.请看下面的代码片段：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        
	&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Button '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;        
	&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;        
	&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;（a）当用户点击“Button 4”的时候会输出什么到控制台，为什么？（b）提供一个或多个备用的可按预期工作的实现方案。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;我的答案：

第一个问题根据for循环这个i在循环完成后结果为5，所以无论点击哪个button打印的结果都是5，因为点击的时候循环已经结束了，而click函数中又没有i这个变量，所以会向上级作用域找变量i。

增加闭包，或者使用let申明变量。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;官方答案&lt;/p&gt;

&lt;p&gt;（a）无论用户点击什么按钮，数字5将总会输出到控制台。这是因为，当 onclick 方法被调用（对于任何按钮）的时候， for 循环已经结束，变量 i 已经获得了5的值。（面试者如果能够谈一谈有关如何执行上下文，可变对象，激活对象和内部“范围”属性贡有助于闭包行为，则可以加分）。&lt;/p&gt;

&lt;p&gt;（b）要让代码工作的关键是，通过传递到一个新创建的函数对象，在每次传递通过 for 循环时，捕捉到 i 值。下面是三种可能实现的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 5; i++) {     
	var btn = document.createElement('button');     
	btn.appendChild(document.createTextNode('Button ' + i));     
	btn.addEventListener('click', (function(i) {       
		return function() { console.log(i); }; }
	)(i));     
	document.body.appendChild(btn);   
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 5; i++) {     
	var btn = document.createElement('button');     
	btn.appendChild(document.createTextNode('Button ' + i));     
	(function (i) {       
		btn.addEventListener('click', function() { console.log(i); });
	})(i);     
	document.body.appendChild(btn);   
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;['a', 'b', 'c', 'd', 'e'].forEach(function (value, i) {     
	var btn = document.createElement('button');     
	btn.appendChild(document.createTextNode('Button ' + i));     
	btn.addEventListener('click', function() { console.log(i); });     
	document.body.appendChild(btn);   
});

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;14.下面的代码将输出什么到控制台，为什么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var arr1 = &quot;john&quot;.split('');   
var arr2 = arr1.reverse();   
var arr3 = &quot;jones&quot;.split('');   
arr2.push(arr3);   
console.log(&quot;array 1: length=&quot; + arr1.length + &quot; last=&quot; + arr1.slice(-1));   
console.log(&quot;array 2: length=&quot; + arr2.length + &quot; last=&quot; + arr2.slice(-1));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看到这道题想到的是数组之间的赋值。由于是引用类型，所以赋值其实是指向地址。操作arr2其实就是操作arr1。这两个的输出其实是一样的。&lt;/p&gt;

&lt;p&gt;官方答案&lt;/p&gt;

&lt;p&gt;“array 1: length=5 last=j,o,n,e,s” &lt;br /&gt;
“array 2: length=5 last=j,o,n,e,s”&lt;/p&gt;

&lt;p&gt;arr1 和 arr2 在上述代码执行之后，两者相同了，原因是：&lt;/p&gt;

&lt;p&gt;调用数组对象的 reverse() 方法并不只返回反顺序的阵列，它也反转了数组本身的顺序（即，在这种情况下，指的是 arr1）。
 reverse() 方法返回一个到数组本身的引用（在这种情况下即，arr1）。其结果为，arr2 仅仅是一个到 arr1的引用（而不是副本）。因此，当对 arr2做了任何事情（即当我们调用 arr2.push(arr3);）时，arr1 也会受到影响，因为 arr1 和 arr2 引用的是同一个对象。&lt;/p&gt;

&lt;p&gt;这里有几个侧面点有时候会让你在回答这个问题时，阴沟里翻船：&lt;/p&gt;

&lt;p&gt;传递数组到另一个数组的 push() 方法会让整个数组作为单个元素映射到数组的末端。其结果是，语句 arr2.push(arr3); 在其整体中添加 arr3 作为一个单一的元素到 arr2 的末端（也就是说，它并没有连接两个数组，连接数组是 concat() 方法的目的）。&lt;/p&gt;

&lt;p&gt;和Python一样，JavaScript标榜数组方法调用中的负数下标，例如 slice() 可作为引用数组末尾元素的方法：例如，-1下标表示数组中的最后一个元素，等等。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;15、下面的代码将输出什么到控制台，为什么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我的结果是 122,32,02,112,NaN2,NaN，和标答是一样的。&lt;/p&gt;

&lt;p&gt;首先数字加字符串得到的会是一个字符串，而第一个正好符合，所以结果是122。当字符前面有+-号的时候会做运算，如果字符串是数字那么就会变为数字类型，所以第二个是32 第三个是02。同理第四个符合第一个和第二个的标准，所以第四个结果是112。当两个不是数字类型的字符进行运算的话得到的结果会是NaN，而第五个又是NaN+’2’所以数字类型与字符类型相加得到的还是一个字符串类型NaN2。第六个是两个字符类型相减所以结果是NaN，最后一个数是数字类型，而NaN也是一个数字类型，所以两个是可以相加的，但是结果肯定是NaN。&lt;/p&gt;

&lt;p&gt;官方答案：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;原因是…

这里的根本问题是，JavaScript（ECMAScript）是一种弱类型语言，它可对值进行自动类型转换，以适应正在执行的操作。让我们通过上面的例子来说明这是如何做到的。

例1：1 + &quot;2&quot; + &quot;2&quot; 输出：&quot;122&quot; 说明： 1 + &quot;2&quot; 是执行的第一个操作。由于其中一个运算对象（&quot;2&quot;）是字符串，JavaScript会假设它需要执行字符串连接，因此，会将 1 的类型转换为 &quot;1&quot;， 1 + &quot;2&quot;结果就是 &quot;12&quot;。然后， &quot;12&quot; + &quot;2&quot; 就是 &quot;122&quot;。

例2： 1 + +&quot;2&quot; + &quot;2&quot; 输出： &quot;32&quot; 说明：根据运算的顺序，要执行的第一个运算是 +&quot;2&quot;（第一个 &quot;2&quot; 前面的额外 + 被视为一元运算符）。因此，JavaScript将 &quot;2&quot; 的类型转换为数字，然后应用一元 + 号（即，将其视为一个正数）。其结果是，接下来的运算就是 1 + 2 ，这当然是 3。然后我们需要在一个数字和一个字符串之间进行运算（即， 3 和 &quot;2&quot;），同样的，JavaScript会将数值类型转换为字符串，并执行字符串的连接，产生 &quot;32&quot;。

例3： 1 + -&quot;1&quot; + &quot;2&quot; 输出： &quot;02&quot;  说明：这里的解释和前一个例子相同，除了此处的一元运算符是 - 而不是 +。先是 &quot;1&quot; 变为 1，然后当应用 - 时又变为了 -1 ，然后将其与 1相加，结果为 0，再将其转换为字符串，连接最后的 &quot;2&quot; 运算对象，得到 &quot;02&quot;。
例4： +&quot;1&quot; + &quot;1&quot; + &quot;2&quot; 输出： &quot;112&quot; 说明：虽然第一个运算对象 &quot;1&quot;因为前缀的一元 + 运算符类型转换为数值，但又立即转换回字符串，当连接到第二个运算对象 &quot;1&quot; 的时候，然后又和最后的运算对象&quot;2&quot; 连接，产生了字符串 &quot;112&quot;。

例5： &quot;A&quot; - &quot;B&quot; + &quot;2&quot; 输出： &quot;NaN2&quot; 说明：由于运算符 -  不能被应用于字符串，并且 &quot;A&quot; 和 &quot;B&quot; 都不能转换成数值，因此，&quot;A&quot; - &quot;B&quot;的结果是 NaN，然后再和字符串 &quot;2&quot; 连接，得到 &quot;NaN2&quot; 。

例6： &quot;A&quot; - &quot;B&quot; + 2 输出： NaN 说明：参见前一个例子， &quot;A&quot; - &quot;B&quot; 结果为 NaN。但是，应用任何运算符到NaN与其他任何的数字运算对象，结果仍然是 NaN。

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;16、下面的递归代码在数组列表偏大的情况下会导致堆栈溢出。在保留递归模式的基础上，你怎么解决这个问题？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readHugeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextListItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;       
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;           
		&lt;span class=&quot;c1&quot;&gt;// process the list item...           &lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;nextListItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;       
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;官方答案：&lt;/p&gt;

&lt;p&gt;潜在的堆栈溢出可以通过修改nextListItem 函数避免：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readHugeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextListItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;       
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;           
		&lt;span class=&quot;c1&quot;&gt;// process the list item...           &lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextListItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;堆栈溢出之所以会被消除，是因为事件循环操纵了递归，而不是调用堆栈。&lt;/p&gt;

&lt;p&gt;当 nextListItem 运行时，如果 item不为空，timeout函数（nextListItem）就会被推到事件队列，该函数退出，因此就清空调用堆栈。当事件队列运行其timeout事件，且进行到下一个 item 时，定时器被设置为再次调用 nextListItem。因此，该方法从头到尾都没有直接的递归调用，所以无论迭代次数的多少，调用堆栈保持清空的状态。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;17、JavaScript中的“闭包”是什么？请举一个例子。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;官方答案：&lt;/p&gt;

&lt;p&gt;闭包是一个可以访问外部（封闭）函数作用域链中的变量的内部函数。闭包可以访问三种范围中的变量：这三个范围具体为：（1）自己范围内的变量，（2）封闭函数范围内的变量，以及（3）全局变量。&lt;/p&gt;

&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;globalVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outerArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outerArg = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerArg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;innerArg = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerArg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outerVar = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outerVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;innerVar = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;globalVar = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;globalVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在上面的例子中，来自于 innerFunc， outerFunc和全局命名空间的变量都在 innerFunc的范围内。因此，上面的代码将输出如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;outerArg = 123   innerArg = 456   outerVar = a   innerVar = b   globalVar = xyz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;18、下面的代码将输出什么：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;官方答案如下，因为网页上并没有题。。。&lt;/p&gt;

&lt;p&gt;解释你的答案。闭包在这里能起什么作用？&lt;/p&gt;

&lt;p&gt;上面的代码不会按预期显示值0，1，2，3，和4，而是会显示5，5，5，5，和5。
原因是，在循环中执行的每个函数将整个循环完成之后被执行，因此，将会引用存储在 i中的最后一个值，那就是5。&lt;/p&gt;

&lt;p&gt;闭包可以通过为每次迭代创建一个唯一的范围，存储范围内变量的每个唯一的值，来防止这个问题，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 5; i++) {       
	(function(x) {
		setTimeout(function(){
		console.log(x); }, x * 1000 );
	})(i);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这就会按预期输出0，1，2，3，和4到控制台。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;19、以下代码行将输出什么到控制台？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0 || 1 = &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1 || 2 = &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0 &amp;amp;&amp;amp; 1 = &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1 &amp;amp;&amp;amp; 2 = &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;输出结果是：0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1 = 1，1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;2 = 1，0 &amp;amp;&amp;amp; 1 = 0，1 &amp;amp;&amp;amp; 2 = 2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;在JavaScript中，&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;和 &amp;amp;&amp;amp;都是逻辑运算符，用于在从左至右计算时，返回第一个可完全确定的“逻辑值”。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;或（&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;）运算符。在形如 X&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Y的表达式中，首先计算X 并将其解释执行为一个布尔值。如果这个布尔值true，那么返回true（1），不再计算 Y，因为“或”的条件已经满足。如果这个布尔值为false，那么我们仍然不能知道 X&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Y是真是假，直到我们计算 Y，并且也把它解释执行为一个布尔值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;因此， 0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1 的计算结果为true（1），同理计算1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;2。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;与（ &amp;amp;&amp;amp;）运算符。在形如 X&amp;amp;&amp;amp;Y的表达式中，首先计算 X并将其解释执行为一个布尔值。如果这个布尔值为 false，那么返回 false（0），不再计算 Y，因为“与”的条件已经失败。如果这个布尔值为true，但是，我们仍然不知道 X&amp;amp;&amp;amp;Y 是真是假，直到我们去计算 Y，并且也把它解释执行为一个布尔值。&lt;/p&gt;

&lt;p&gt;不过，关于 &amp;amp;&amp;amp;运算符有趣的地方在于，当一个表达式计算为“true”的时候，那么就返回表达式本身。这很好，虽然它在逻辑表达式方面计算为“真”，但如果你希望的话也可用于返回该值。这就解释了为什么，有些令人奇怪的是， 1 &amp;amp;&amp;amp; 2返回 2（而不是你以为的可能返回 true 或 1）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;20、执行下面的代码时将输出什么？请解释。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出结果是：true，false&lt;/p&gt;

&lt;p&gt;很简单，双等于不会比较类型，字符串0会被转成数字，两个false结果就是true了。三等于会判断两边变量的类型，所以为false。&lt;/p&gt;

&lt;p&gt;官方答案：&lt;/p&gt;

&lt;p&gt;在JavaScript中，有两种等式运算符。三个等于运算符 === 的作用类似传统的等于运算符：如果两侧的表达式有着相同的类型和相同的值，那么计算结果为true。而双等于运算符，会只强制比较它们的值。因此，总体上而言，使用 ===而不是 ==的做法更好。 !==vs !=亦是同理。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;21、以下代码将输出什么？并解释你的答案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之前遇到过，key不能是对象，所以会被转成字符串，对象转成字符串后为[object object]，所以b和c转换后得到的值时一样的，而重复给a[b],a[c]赋值的话 相当于给同一个key赋值了，所以结果为456.&lt;/p&gt;

&lt;p&gt;官方答案：&lt;/p&gt;

&lt;p&gt;这段代码将输出 456（而不是 123）。&lt;/p&gt;

&lt;p&gt;原因为：当设置对象属性时，JavaScript会暗中字符串化参数值。在这种情况下，由于 b 和 c都是对象，因此它们都将被转换为”[object Object]”。结果就是， a[b]和a[c]均相当于a[“[object Object]”] ，并可以互换使用。因此，设置或引用 a[c]和设置或引用 a[b]完全相同。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;22、以下代码行将输出什么到控制台？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这道题之前见到过，&lt;code class=&quot;highlighter-rouge&quot;&gt;阶乘&lt;/code&gt; 10&lt;em&gt;9&lt;/em&gt;8&lt;em&gt;7&lt;/em&gt;6&lt;em&gt;5&lt;/em&gt;4&lt;em&gt;3&lt;/em&gt;2*1  结果就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;3628800&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;官方答案：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;720&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5040&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40320&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;362880&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3628800&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;命名函数 f()递归地调用本身，当调用 f(1)的时候，只简单地返回1。&lt;/p&gt;

&lt;p&gt;其实就是一个立即执行函数+递归，求个阶乘而已（10!）。给立即执行函数加了个名字 f，方便在递归里调用，其实完全可以用arguments.callee 代替：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var ans = (function(n){
  return ((n &amp;gt; 1) ? n * arguments.callee(n-1) : n)
})(10);

console.log(ans);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;23.请看下面的代码段。控制台将输出什么，为什么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;           
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       
	&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这道题懂一点闭包的就可以打出来，根据作用域输出为1。虽然return出了自执行函数，他的this是外层this，但是return后的函数当前作用域如果没有此变量他就会向上找。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;24.下面的代码将输出什么到控制台，为什么：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
	&lt;span class=&quot;na&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John Doe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       
	&lt;span class=&quot;na&quot;&gt;getSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;           
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stoleSecretIdentity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stoleSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;   
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这道题考的是this作用域，第一个输出的this是window所以输出是undefined，第二个的this是hero，所以他会正常输出John Doe。&lt;/p&gt;

&lt;p&gt;第一行之所以this是window，是因为他将hero.getSecretIdentity的值赋值给了window下的stoleSecretIdentity字面量，这个方法运行时window中并没有_name字段，所以报undefined。&lt;/p&gt;

&lt;p&gt;第一个 console.log之所以输出 undefined，是因为我们正在从 hero对象提取方法，所以调用了全局上下文中（即窗口对象）的 stoleSecretIdentity()，而在此全局上下文中， _name属性不存在。&lt;/p&gt;

&lt;p&gt;其中一种修复stoleSecretIdentity() 函数的方法如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stoleSecretIdentity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;25.创建一个给定页面上的一个DOM元素，就会去访问元素本身及其所有子元素（不只是它的直接子元素）的函数。对于每个被访问的元素，函数应该传递元素到提供的回调函数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function Traverse(p_element,p_callback) {
   p_callback(p_element);
   var list = p_element.children;
   for (var i = 0; i &amp;lt; list.length; i++) {
       Traverse(list[i],p_callback);  // recursive call
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 18 Sep 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/09/18/jsInterviewQuestions25/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/09/18/jsInterviewQuestions25/</guid>
        
        <category>总结</category>
        
        <category>面试题</category>
        
        
      </item>
    
      <item>
        <title>Vue2开发过程的问题</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;在使用vue2在开发过程中遇到了一些问题，具体文档看vue官网就可以了，写的还不错。不过由于有过angular和react的实际开发经验，出现的问题都可以很快解决，甚至有些问题还一模一样的重现了一次。。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;默认导出文件夹&quot;&gt;默认导出文件夹&lt;/h2&gt;

&lt;p&gt;遇到的第一个问题就是，项目是放到tomcat中的，所以只需要给他们一个文件夹即可，可是默认的static文件夹冲突了。。。&lt;/p&gt;

&lt;p&gt;改一下webpack的配置文件就可以了&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/config/index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;assetsPublicPath&lt;/code&gt;改为指定的文件夹路径即可&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;assetsSubDirectory&lt;/code&gt; 中的值也可以修改，不修改的话默认打包出来的文件夹中存在&lt;code class=&quot;highlighter-rouge&quot;&gt;static静态文件夹&lt;/code&gt;。其中包含&lt;code class=&quot;highlighter-rouge&quot;&gt;根目录下static&lt;/code&gt;中包含的文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* 我是这么改的 */
build.assetsSubDirectory: 'static'
build.assetsPublicPath: '/m/'
dev.assetsSubDirectory: 'static'
dev.assetsPublicPath: '/m/'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还有要注意的是，如果你修改了&lt;code class=&quot;highlighter-rouge&quot;&gt;assetsPublicPathname&lt;/code&gt;，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;当中的&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;中也要进行修改哦，需要修改&lt;code class=&quot;highlighter-rouge&quot;&gt;文件夹前缀&lt;/code&gt;(刚才改名的文件夹)。&lt;/p&gt;

&lt;h2 id=&quot;可以使用pug和less编写&quot;&gt;可以使用pug和less编写&lt;/h2&gt;

&lt;p&gt;由于使用&lt;code class=&quot;highlighter-rouge&quot;&gt;VSCode编译器&lt;/code&gt;，下载了一个vue插件，发现在编写&lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt;时会提示可以按照&lt;code class=&quot;highlighter-rouge&quot;&gt;pug&lt;/code&gt;格式编写，在写&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;时可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;格式编写，但是对应的你还需要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;下载&lt;code class=&quot;highlighter-rouge&quot;&gt;less-loader&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;pug&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/ * 如下 */
&amp;lt;template lang=&quot;pug&quot;&amp;gt;&amp;lt;/template&amp;gt;
&amp;lt;style lang=&quot;less&quot;&amp;gt;&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;css作用域&quot;&gt;css作用域&lt;/h2&gt;

&lt;p&gt;编写vue时，由于作用域的问题，我们在写css的时候会设置一个属性&lt;code class=&quot;highlighter-rouge&quot;&gt;scoped&lt;/code&gt;，他就表示了当前页面的css仅限在当前组件中使用。（感谢那个vscode中的vue插件，生成的代码还是很标准的）&lt;/p&gt;

&lt;h2 id=&quot;axios的使用配置&quot;&gt;axios的使用配置&lt;/h2&gt;

&lt;p&gt;在使用axios时需要注意，他依赖&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;所以可能vuecli自带的babel-plugin-transform-runtime并不能很好的处理，而且在微信浏览器下可能还会出现其他不支持的情况，所以我们需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;来编译。&lt;/p&gt;

&lt;p&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt;属性,将其中的transform-runtime注释掉即可，别忘了删除掉这个不用的npm包。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-runtime&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在axios配置文件或者其他需要编译的js文件中直接引入就可以啦&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import babel-polyfill
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;数组在赋值后没有自动绑定&quot;&gt;数组在赋值后没有自动绑定&lt;/h2&gt;

&lt;p&gt;由于vue依赖的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperty&lt;/code&gt;，所以数组无法使用这个方法，就导致了在给数组赋值的时候无法自动绑定新的值，所以就用到了&lt;code class=&quot;highlighter-rouge&quot;&gt;$set&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.userList.$set(i,'1');  

或

this.$set(userList,i,'1');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果还不行可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign()&lt;/code&gt;,重新生成一个对象并重新赋值，不过这种情况至今没有遇到过。&lt;/p&gt;

&lt;p&gt;指的注意的是循环的标签在template标签下一定要有&lt;code class=&quot;highlighter-rouge&quot;&gt;父节点&lt;/code&gt;，否则很有可能无法渲染出来(angular,react都有这样的规定)&lt;/p&gt;

&lt;h2 id=&quot;获取输入框的值&quot;&gt;获取输入框的值&lt;/h2&gt;

&lt;p&gt;一种方法是直接获取绑定的model，一种是在输入框上绑定事件，再事件上传入&lt;code class=&quot;highlighter-rouge&quot;&gt;$event&lt;/code&gt;参数，这样&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;中的方法就可以接受到这个&lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;了,然后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;event.target.value&lt;/code&gt;即可获取输入的值&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

或

&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'update($event)'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 29 Aug 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/08/29/vue2/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/08/29/vue2/</guid>
        
        <category>总结</category>
        
        <category>Vue2</category>
        
        
      </item>
    
      <item>
        <title>less 笔记</title>
        <description>&lt;p&gt;CSS（层叠样式表）是一门历史悠久的标记性语言，同 HTML 一道，被广泛应用于万维网（World Wide Web）中。HTML 主要负责文档结构的定义，CSS 负责文档表现形式或样式的定义。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;作为一门标记性语言，CSS 的语法相对简单，对使用者的要求较低，但同时也带来一些问题：CSS 需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码，造成这些困难的很大原因源于 CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。LESS 为 Web 开发者带来了福音，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样，LESS 可以让我们用更少的代码做更多的事情。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;相比sass来说，less编译的依赖不多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;在客户端使用&quot;&gt;在客户端使用&lt;/h2&gt;

&lt;p&gt;和引入css一样直接使用style标签引入，但是rel的属性要设置为”&lt;code class=&quot;highlighter-rouge&quot;&gt;stylesheet/less&lt;/code&gt;” 。
在引入less文件后一定要引入&lt;code class=&quot;highlighter-rouge&quot;&gt;less.js&lt;/code&gt;，否则可能会编译解析出错。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet/less&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;styles.less&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;在服务器端使用&quot;&gt;在服务器端使用&lt;/h2&gt;

&lt;p&gt;less在服务器端的使用主要是借助于less的编译器，将less源文件编译生成最终的css文件。
目前常用且简单的方式是利用node的包管理器(npm)安装less。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install less
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你想要安装稳定版的less，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install less@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在项目开发初期，我们无论采用客户端还是服务器端的用法，我们都需要想办法将我们要用到的css或less文件引入到我们的html页面或是桥接文件中，less提供了一个我们很熟悉的功能&lt;code class=&quot;highlighter-rouge&quot;&gt;Importing&lt;/code&gt;。我们可以通过这个关键字引入我们需要的 .less 或 .css 文件。 如：&lt;/p&gt;

&lt;p&gt;@import “variables.less”;&lt;/p&gt;

&lt;p&gt;.less 文件也可以省略后缀名，像这样：@import “variables”;&lt;/p&gt;

&lt;p&gt;引入css同less文件一样，只是.css 后缀名不能省略。&lt;/p&gt;

&lt;h3 id=&quot;使用编译生成的静态-css-文件&quot;&gt;使用编译生成的静态 CSS 文件&lt;/h3&gt;

&lt;p&gt;我们可以通过less的编译器，将less文件编译成为css文件，在html文章中引入使用。这里要强调的一点，less是完全兼容css语法的，也就是说，我们可以将标准的css文件直接改成 .less 格式，less编译器可以完全识别。&lt;/p&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;p&gt;当我们安装了less，就可以在node中这样调用编译器：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'less'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.class { width: 1 + 1 }'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出的结果是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.class {
    width: 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然也可以手动调用解析器和编译器：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.class { width: 1 + 1 }'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;

&lt;p&gt;你可以向解析器传递参数&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Specify search paths for @import directives&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'style.less'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Specify a filename, for better error messages&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.class { width: 1 + 1 }'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;compress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Minify CSS output&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;在命令行下使用&quot;&gt;在命令行下使用&lt;/h3&gt;

&lt;p&gt;你可以在终端调用 LESS 解析器:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lessc styles.less
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的命令会将编译后的 CSS 传递给 stdout, 你可以将它保存到一个文件中:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lessc styles.less &amp;gt; styles.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如何你想将编译后的 CSS 压缩掉，那么加一个 -x 参数就可以了.&lt;/p&gt;

&lt;h2 id=&quot;变量&quot;&gt;变量&lt;/h2&gt;

&lt;p&gt;顾名思义，变量可以让我们定义一系列的值，以达到复用的效果，所以等我们修改代码样式的时候只需要修改这一个变量就可以了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;请注意 LESS 中的变量为完全的 ‘常量’ ，所以只能定义一次&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* LESS */
@color: #4D926F;
#header {
  color: @color;
}
h2 {
  color: @color;
}

/* 生成的 CSS */
#header {
  color: #4D926F;
}
h2 {
  color: #4D926F;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;混合&quot;&gt;混合&lt;/h2&gt;

&lt;p&gt;就是讲两个class混合到一起，从而使两个class具有继承关系，他们还可以像函数一样带有&lt;code class=&quot;highlighter-rouge&quot;&gt;参数&lt;/code&gt;的调用。
例如classA被classB引用，那么classB就继承并具有了classA的所有属性。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;任何 CSS class, id 或者 元素 属性集都可以以同样的方式引入&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* LESS */
.rounded-corners (@radius: 5px) {
  border-radius: @radius;
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
}
#header {
  .rounded-corners;
}
#footer {
  .rounded-corners(10px); /* 带参了，所以默认值5px会被替换为10px*/
}

/* 生成的 CSS */
/* 不带参的函数 */
#header {
  border-radius: 5px;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
/* 带参的函数 */
#footer {
  border-radius: 10px;
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以定义不带参数属性集合,如果你想隐藏这个属性集合，不让它暴露到CSS中去，但是你还想在其他的属性集合中引用，你会发现这个方法非常的好用:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* less */
.wrap () {
  text-wrap: wrap;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  word-wrap: break-word;
}
pre { .wrap }

/* css */
pre {
  text-wrap: wrap;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  word-wrap: break-word;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;arguments-变量&quot;&gt;@arguments 变量&lt;/h3&gt;

&lt;p&gt;@arguments包含了所有传递进来的参数. 如果你不想单独处理每一个参数的话就可以像这样写:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* less */
.box-shadow (@x: 0, @y: 0, @blur: 1px, @color: #000) {
  box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  -webkit-box-shadow: @arguments;
}
.box-shadow(2px, 5px);

/* css */
box-shadow: 2px 5px 1px #000;
-moz-box-shadow: 2px 5px 1px #000;
-webkit-box-shadow: 2px 5px 1px #000;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;模式匹配和导引表达式&quot;&gt;模式匹配和导引表达式&lt;/h2&gt;

&lt;p&gt;有些情况下，我们想根据传入的参数来改变混合的默认呈现，比如下面这个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.mixin (@s, @color) { ... }

.class {
  .mixin(@switch, #888);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想让.mixin根据不同的@switch值而表现各异，如下这般设置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.mixin (dark, @color) {
  color: darken(@color, 10%);
}
.mixin (light, @color) {
  color: lighten(@color, 10%);
}
.mixin (@_, @color) { /* @_通配，都不论第一个参数是什么都会包括 */
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* less */
@switch: light;

.class {
  .mixin(@switch, #888);
}

/* css */
.class {
  color: #a2a2a2;
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上，&lt;code class=&quot;highlighter-rouge&quot;&gt;.mixin&lt;/code&gt;就会得到传入颜色的浅色。如果&lt;code class=&quot;highlighter-rouge&quot;&gt;@switch&lt;/code&gt;设为dark，就会得到深色。&lt;/p&gt;

&lt;p&gt;具体实现如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一个混合定义并未被匹配，因为它只接受dark做为首参&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二个混合定义被成功匹配，因为它只接受light&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第三个混合定义被成功匹配，因为它接受任意值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;只有被匹配的混合才会被使用。变量可以匹配任意的传入值，而变量以外的固定值就仅仅匹配与其相等的传入值。&lt;/p&gt;

&lt;p&gt;我们也可以匹配多个参数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.mixin (@a) {
  color: @a;
}
.mixin (@a, @b) {
  color: fade(@a, @b);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们现在调用，.mixin使用带有一个参数，那么我们将使用的是只有一个参数的.mixin(@a)。如果传递了两个参数，那么将使用带有两个参数的.mixin(@a,@b)。&lt;/p&gt;

&lt;h3 id=&quot;引导&quot;&gt;引导&lt;/h3&gt;

&lt;p&gt;当我们想根据表达式进行匹配，而非根据值和参数匹配时，导引就显得非常有用。如果你对函数式编程非常熟悉，那么你很可能已经使用过导引。&lt;/p&gt;

&lt;p&gt;为了尽可能地保留CSS的可声明性，LESS通过导引混合而非if/else语句来实现条件判断，因为前者已在&lt;code class=&quot;highlighter-rouge&quot;&gt;@media query&lt;/code&gt;特性中被定义。&lt;/p&gt;

&lt;p&gt;以此例做为开始：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.mixin (@a) when (lightness(@a) &amp;gt;= 50%) {
  background-color: black;
}
.mixin (@a) when (lightness(@a) &amp;lt; 50%) {
  background-color: white;
}
.mixin (@a) {
  color: @a;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt;关键字用以定义一个导引序列(此例只有一个导引)。接下来我们运行下列代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* less */
.class1 { .mixin(#ddd) }
.class2 { .mixin(#555) }

/* css */
.class1 {
  background-color: black;
  color: #ddd;
}
.class2 {
  background-color: white;
  color: #555;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导引中可用的全部比较运算有： &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; &amp;gt;= = =&amp;lt; &amp;lt;&lt;/code&gt;。此外，关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;只表示&lt;code class=&quot;highlighter-rouge&quot;&gt;布尔真&lt;/code&gt;值，下面两个混合是相同的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.truth (@a) when (@a) { ... }
.truth (@a) when (@a = true) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除去&lt;code class=&quot;highlighter-rouge&quot;&gt;关键字true以外的值&lt;/code&gt;都被视示&lt;code class=&quot;highlighter-rouge&quot;&gt;布尔假&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.class {
    .truth(40); // 不符合上述定义中的任何一种。 因为值为false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导引序列使用逗号‘,’—分割，当且仅当所有条件都符合时，才会被视为匹配成功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.mixin (@a) when (@a &amp;gt; 10), (@a &amp;lt; -10) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导引可以无参数，也可以对参数进行比较运算：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@media: mobile;

.mixin (@a) when (@media = mobile) { ... }
.mixin (@a) when (@media = desktop) { ... }

.max (@a, @b) when (@a &amp;gt; @b) { width: @a }
.max (@a, @b) when (@a &amp;lt; @b) { width: @b }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想基于值的类型进行匹配，我们就可以使用is*函式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.mixin (@a, @b: 0) when (isnumber(@b)) { ... }
.mixin (@a, @b: black) when (iscolor(@b)) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面就是常见的检测函式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iscolor
isnumber
isstring
iskeyword
isurl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你想判断一个值是纯数字，还是某个单位量，可以使用下列函式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;ispixel  //px 
ispercentage   //百分比
isem  // em
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后再补充一点，在导引序列中可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;关键字实现&lt;code class=&quot;highlighter-rouge&quot;&gt;与&lt;/code&gt;条件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.mixin (@a) when (isnumber(@a)) and (@a &amp;gt; 0) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt;关键字实现&lt;code class=&quot;highlighter-rouge&quot;&gt;或&lt;/code&gt;条件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.mixin (@b) when not (@b &amp;gt; 0) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;嵌套&quot;&gt;嵌套&lt;/h2&gt;

&lt;p&gt;如同混合，目的同样是让不同的class合并为一个，这样可以从很大程度上减少代码量，并且代码看起来更清晰。而且会感觉跟DOM结构格式有点像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* LESS */
#header {
  h1 {
    font-size: 26px;
    font-weight: bold;
  }
  p { font-size: 12px;
    a { text-decoration: none;
      &amp;amp;:hover { border-width: 1px }
    }
  }
}

/* 生成的 CSS */
#header h1 {
  font-size: 26px;
  font-weight: bold;
}
#header p {
  font-size: 12px;
}
#header p a {
  text-decoration: none;
}
#header p a:hover {
  border-width: 1px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意 &amp;amp; 符号的使用—如果你想写串联选择器，而不是写后代选择器，就可以用到&amp;amp;了. 这点对伪类尤其有用如 :hover 和 :focus.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* less */
.bordered {
  &amp;amp;.float {
    float: left; 
  }
  .top {
    margin: 5px; 
  }
}

/* css */
.bordered.float {
  float: left;  
}
.bordered .top {
  margin: 5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;函数运算&quot;&gt;函数&amp;amp;运算&lt;/h2&gt;

&lt;p&gt;函数提供了加减乘除操作,可以做属性和颜色的操作。这样就可以实现属性间的复杂关系。LESS的函数和js中是一一对应的，如果你想还能操作属性值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* LESS */

@the-border: 1px;
@base-color: #111;
@red:        #842210;

#header {
  color: @base-color * 3;
  border-left: @the-border;
  border-right: @the-border * 2;
}
#footer { 
  color: @base-color + #003300;
  border-color: desaturate(@red, 10%);/*饱和度*/
}

/* 生成的 CSS */
#header {
  color: #333;
  border-left: 1px;
  border-right: 2px;
}
#footer { 
  color: #114411;
  border-color: #7d2717;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@base: 5%;
@filler: @base * 2;
@other: @base + @filler;

color: #888 / 4;
background-color: @base-color + #111;
height: 100% / 2 + @filler;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LESS 的运算已经超出了我们的期望，它能够分辨出颜色和单位。如果像下面这样单位运算的话:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@var: 1px + 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LESS 会输出 6px.&lt;/p&gt;

&lt;p&gt;括号也同样允许使用:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@var&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;并且可以在复合属性中进行运算:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;border: (@width * 2) solid black;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;color-函数&quot;&gt;Color 函数&lt;/h3&gt;

&lt;p&gt;LESS 提供了一系列的颜色运算函数. 颜色会先被转化成 HSL 色彩空间, 然后在通道级别操作:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;lighten(@color, 10%);     // 返回一个比输入颜色浅10%的颜色
darken(@color, 10%);      // 返回一个比输入颜色深10%的颜色

saturate(@color, 10%);    // 返回的颜色比输入颜色多10%
desaturate(@color, 10%);  // 返回的颜色比输入颜色少10%

fadein(@color, 10%);      // 返回的颜色比输入的颜色透明10%
fadeout(@color, 10%);     // 返回的颜色比输入的颜色透明10%
fade(@color, 50%);        // 返回的颜色透明度为50%

spin(@color, 10);         // 返回的颜色比输入的颜色大10度
spin(@color, -10);        // 返回的颜色比输入的颜色小10度

mix(@color1, @color2);    // 返回的颜色是color1与color2的混合
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还可以提取颜色信息:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;hue(@color);        // 返回输入颜色的色调
saturation(@color); // 返回输入颜色的饱和度
lightness(@color);  // 返回输入颜色的亮度
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想在一种颜色的通道上创建另一种颜色，这些函数就显得那么的好用，例如:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@new: hsl(hue(@old), 45%, 90%);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@new 将会保持 @old的&lt;code class=&quot;highlighter-rouge&quot;&gt;色调&lt;/code&gt;, 但是具有不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;饱和度&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;亮度&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;math-函数&quot;&gt;Math 函数&lt;/h3&gt;

&lt;p&gt;LESS提供了一组方便的数学函数，你可以使用它们处理一些数字类型的值:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;round(1.67); // returns `2`  四舍五入
ceil(2.4);   // returns `3`  向上取舍，返回大于或者等于指定表达式的最小整数
floor(2.6);  // returns `2`  向下取舍，返回小于或者等于指定表达式的最小整数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想将一个值转化为百分比，你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;percentage&lt;/code&gt; 函数:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;percentage(0.5); // returns `50%`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;命名空间&quot;&gt;命名空间&lt;/h2&gt;

&lt;p&gt;有时候，你可能为了更好组织CSS或者单纯是为了更好的封装，将一些变量或者混合模块打包起来, 你可以像下面这样在#bundle中定义一些属性集之后可以重复使用:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;#bundle {
  .button () {
    display: block;
    border: 1px solid black;
    background-color: grey;
    &amp;amp;:hover { background-color: white }
  }
  .tab { ... }
  .citation { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你只需要在 #header a中像这样引入 .button:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;#header a {
  color: orange;
  #bundle &amp;gt; .button;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;作用域&quot;&gt;作用域&lt;/h2&gt;

&lt;p&gt;LESS 中的作用域跟其他编程语言非常类似，首先会从&lt;code class=&quot;highlighter-rouge&quot;&gt;本地查找变量&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;混合模块&lt;/code&gt;，如果没找到的话会去&lt;code class=&quot;highlighter-rouge&quot;&gt;父级作用域&lt;/code&gt;中查找，直到找到为止.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@var: red;
#page {
  @var: white;
  #header {
    color: @var; // white
  }
}
#footer {
  color: @var; // red  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;注释&quot;&gt;注释&lt;/h2&gt;

&lt;p&gt;CSS 形式的注释在 LESS 中是依然保留的:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* Hello, I'm a CSS-style comment */
.class { color: black }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LESS 同样也支持双斜线的注释, 但是编译成 CSS 的时候自动过滤掉:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;// Hi, I'm a silent comment, I won't show up in your CSS
.class { color: white }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;importing&quot;&gt;Importing&lt;/h2&gt;

&lt;p&gt;上面已经讲解过&lt;code class=&quot;highlighter-rouge&quot;&gt;importing&lt;/code&gt;引入了。这里在说一下，你可以在main文件中通过下面的形势引入 .less 文件, .less 后缀可带可不带:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@import &quot;lib.less&quot;;
@import &quot;lib&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想导入一个CSS文件而且不想LESS对它进行处理，只需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.css后缀&lt;/code&gt;就可以:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@import &quot;lib.css&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样LESS就会跳过它不去处理它.&lt;/p&gt;

&lt;h2 id=&quot;字符串插值&quot;&gt;字符串插值&lt;/h2&gt;

&lt;p&gt;变量可以用类似ruby和php的方式嵌入到字符串中，像&lt;code class=&quot;highlighter-rouge&quot;&gt;@{name}&lt;/code&gt;这样的结构:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@base-url: &quot;http://assets.fnord.com&quot;;
background-image: url(&quot;@{base-url}/images/bg.png&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;避免编译&quot;&gt;避免编译&lt;/h2&gt;

&lt;p&gt;有时候我们需要输出一些不正确的CSS语法或者使用一些 LESS不认识的专有语法.&lt;/p&gt;

&lt;p&gt;要输出这样的值我们可以在字符串前加上一个 ~, 例如:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.class {
    filter: ~&quot;ms:alwaysHasItsOwnSyntax.For.Stuff()&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以将要避免编译的值用 “”包含起来，输出结果为:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;.class {
    filter: ms:alwaysHasItsOwnSyntax.For.Stuff();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;javascript-表达式&quot;&gt;JavaScript 表达式&lt;/h2&gt;

&lt;p&gt;JavaScript 表达式也可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;.less&lt;/code&gt;文件中使用. 可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;反引号&lt;/code&gt;的方式使用:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* less */
@var: `&quot;hello&quot;.toUpperCase() + '!'`;

/* css 输出*/
@var: &quot;HELLO!&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意你也可以同时使用字符串插值和避免编译:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;/* less */
@str: &quot;hello&quot;;
@var: ~`&quot;@{str}&quot;.toUpperCase() + '!'`;

/* css 输出 */
@var: HELLO!;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它也可以访问&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript环境&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@height: `document.body.clientHeight`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想将一个JavaScript&lt;code class=&quot;highlighter-rouge&quot;&gt;字符串&lt;/code&gt;解析成&lt;code class=&quot;highlighter-rouge&quot;&gt;16进制&lt;/code&gt;的颜色值, 你可以使用 color 函数:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-less&quot;&gt;@color: color(`window.colors.baseColor`);
@darkcolor: darken(@color, 10%);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考：https://www.ibm.com/developerworks/cn/web/1207_zhaoch_lesscss/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考：http://www.bootcss.com/p/lesscss/&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 28 Aug 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/08/28/less/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/08/28/less/</guid>
        
        <category>Less</category>
        
        
      </item>
    
      <item>
        <title>vue-cli笔记--安装</title>
        <description>&lt;p&gt;要新开项目了，纠结于使用哪种框架，领导的意思是使用最简单的jquery，而我想要使用时下热门的vue。虽然还没有定调，那就先学学vue吧、&lt;/p&gt;

&lt;p&gt;由于之前做过angular以及react的实际开发，所以对于vue这个两者结合，取其精华去其糟粕的框架觉得应该可以无痛对接。事实确实如此。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;什么是vue&quot;&gt;什么是vue？&lt;/h2&gt;

&lt;p&gt;按照官网的说法，vue是一套&lt;code class=&quot;highlighter-rouge&quot;&gt;渐进式框架&lt;/code&gt;，与其他重量级框架不同的是，vue才是用的是自底向上的增量开发的设计。vue只关心视图层，不仅易于上手还有丰富的第三方框架整合支持（这里我要说一句，第三方框架有好的，但是坑的比较多。react和angular就不同了，资源非常丰富。也许这就是国内和国外的区别）。
另一方面，当与单文件组件和vue生态系统支持的库结合使用时，vue也能够为复杂的单页应用程序提供驱动支持。
vue自称是mvvm框架，但是它太过于注重视图层了，所以我觉得他可能是阉割版的mvvm库。
不过其基于数据驱动和组件化的思想构建，相较于angular和react更加简洁，更易于理解。
如果之前喜欢了jquery的dom操作，那么学习mvvm框架就请抛开操作dom的思维。框架通过特殊的html语法将dom和数据绑定在一起。一旦你创建了绑定，dom将和数据保持同步，每当变更了数据dom也会改变（可以参考vue官网的例子）。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;安装前提是需要先安装nodejs。以及一个命令行工具，可以使用git自带的gitbash。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先全局安装vue-cli  &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g vue-cli&lt;/code&gt; ，过程中可能出现长时间无响应的情况，可以&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+C&lt;/code&gt;结束，重新运行安装程序，如果还不行可以将npm的源地址改为淘宝的源地址，推荐使用临时镜像的方式（淘宝的源版本可能稍稍落后一点点）。 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm --registry https://registry.npm.taobao.org install -g vue-cli&lt;/code&gt; 如果想要直接切换源可以上网查询 &lt;a href=&quot;http://riny.net/2014/cnpm/&quot;&gt;http://riny.net/2014/cnpm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装完成后可以在命令行运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;vue -V&lt;/code&gt; 查询版本号，如果有提示那么就是安装成功了。安装完成后我们就开始创建项目。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;由于是vue-cli，所以一些必须的包已经集成了，所以无法再下载webpack。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;创建项目&quot;&gt;创建项目&lt;/h2&gt;

&lt;p&gt;1.首先找到一个你理想的文件夹目录，&lt;code class=&quot;highlighter-rouge&quot;&gt;不推荐带有中文名的目录结构哦&lt;/code&gt;。这里我们使用gitbash命令行工具执行。&lt;/p&gt;

&lt;p&gt;2.在你的文件夹中运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;vue init webpack my-project&lt;/code&gt; 其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;my-project&lt;/code&gt;是项目的名称，可以随意起名但不能有中文。随后会弹出一串询问信息，根据询问信息的提示安装即可。如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue init webpack my-project                               // 这个是那个安装vue脚手架的命令
This will install Vue 2.x version of the template.        // 这里说明将要创建一个vue 2.x版本的项目
For Vue 1.x use: vue init webpack#1.0 exprice
Project name (exprice)                                    // 项目名称
Project name exprice
Project description (A Vue.js project)                    // 项目描述
Project description A Vue.js project
Author Datura                                             // 项目创建者
Author Datura
Vue build (Use arrow keys)                                // 构建预设
Vue build standalone
Install vue-router? (Y/n)                                 // 是否安装Vue路由，也就是以后是spa（单页面应用需要的模块）
Install vue-router? Yes
Use ESLint to lint your code? (Y/n) n                     // 是否启用eslint检测规则，可以安装但是建议选no，除非你有良好的编码习惯，安装了也没事可以在webpack配置文件中注释掉相关项
Use ESLint to lint your code? Yes
Setup unit tests with Karma + Mocha? (Y/n)
Setup unit tests with Karma + Mocha? Yes
Setup e2e tests with Nightwatch? (Y/n)
Setup e2e tests with Nightwatch? Yes
vue-cli · Generated &quot;my-project&quot;.
To get started:                                           // 启动服务的方式
cd my-project
npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果安装程序没有退出，可以使用ctrl+c的方式退出，然后按照启动方式操作即可。或者手动进入到你创建的目录中，运行 npm install ，安装依赖包完成后运行 npm run dev 即可&lt;/p&gt;

&lt;p&gt;由于时下流行的vue全家桶中有 &lt;code class=&quot;highlighter-rouge&quot;&gt;vue-resource&lt;/code&gt; 这个包，但是刚才并没有安装，所以我们还需要手动安装一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save vue-resource&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装完成后我们就可以使用编译器打开刚刚创建的项目目录了。如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-project
    |--build                        // 构建脚本目录
        |--build.js                 
        |--check-versions.js
        |--dev-client.js
        |--dev-server.js
        |--utils.js
        |--vue-loader.conf.js
        |--webpack.base.conf.js
        |--webpack.dev.conf.js
        |--webpack.prod.conf.js
        |--webpack.test.conf.js
    |--config                       // 构建配置目录
        |--dev.env.js
        |--index.js                 // 配置主文件
        |--prod.env.js
        |--test.env.js
    |--node_modules                 // 依赖包目录
    |--src                          // 主文件源码目录
        |--assets                   // 静态文件目录 我觉得有一个static就可以了。。。。
            |--log.png
        |--components               // 组件目录
            |--Hello.vue
        |--router                   // 路由目录
            |--index.js
        |--App.vue                  
        |--main.js                  // 页面配置
    |--static                       // 静态文件目录
        |--.gitkeep                 
    |--test                         // 测试文件目录，这里就不说了，因为我没有用到过。。。
    |--.babelrc                     // es6 es7文件转义配置文件
    |--.editorconfig                // 编译器的配置文件，我使用的是vscode编译器，其他编译器下的项目不会存在
    |--.eslintrc.js                 // 代码检查配置文件
    |--.gitignore                   // git屏蔽文件配置
    |--.postcssrc.js                // postCss配置文件
    |--index.html                   // 项目主页面
    |--package.json                 // 项目依赖描述文件
    |--README.md                    // 项目简介
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt; 运行后会自动打开页面，端口号是8080，你需要确保你的端口没有被占用才能正常启动。&lt;/p&gt;

&lt;p&gt;当你每次对页面有所修改的时候，系统会自动打包build新的文件并刷新页面，非常方便。&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/08/23/vuecli-install/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/08/23/vuecli-install/</guid>
        
        <category>总结</category>
        
        <category>Vue2</category>
        
        <category>vue-cli</category>
        
        
      </item>
    
      <item>
        <title>Vue2组件通信</title>
        <description>&lt;h2 id=&quot;vue2-组件之间的通信&quot;&gt;Vue2 组件之间的通信&lt;/h2&gt;

&lt;p&gt;在父子组件通信中，无论是子级向父级传值，还是父级向子级传值，都是需要一个中间介质作为中转。&lt;/p&gt;

&lt;p&gt;当父级向子级传值时需要用到props属性，子级向父级传值时需要用到自定义事件。这个结合了ng和react。相比之下Vue简单易懂。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;父组件向子组件传值&quot;&gt;父组件向子组件传值&lt;/h3&gt;

&lt;p&gt;首先来写一个子组件，在子组件的new Vue对象中添加props属性，在属性中以数组的形式写入父级要传输过来的属性名称。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template lang=&quot;html&quot;&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        测量数据 
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
    export default {
        name:'recordIndex',
        props:['message']
    }
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;写完后就可以写父组件了，需要在组件上绑定一个属性，这个属性就是子组件接收时所用的。然后将想要传递的内容写入到=之后即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template lang=&quot;html&quot;&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt; 
        &amp;lt;recordIndex v-bind:message='我是父级给子级传递的内容'&amp;gt;&amp;lt;/recordIndex&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
    import recordIndex from './components/recordIndex'
    export default {
        name:'records',
        components:{recordIndex},
    }
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样，一个简单的父级向子级组件传值的功能就做好了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;子组件在props中创建一个属性，用以接收父组件传过来的值
父组件中注册子组件并在子组件标签中添加子组件props中创建的属性
把需要传给子组件的值赋给该属性即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;子级向父级传值&quot;&gt;子级向父级传值&lt;/h3&gt;

&lt;p&gt;子级向父级传值就需要用到Vue自带的发射事件了。（ng也有这样的事件，不过只用过一次就被领导否决了，最后采用service和factory的方式进行父子通信）&lt;/p&gt;

&lt;p&gt;还是先来看子组件，这个例子时点击发送消息，所以需要在页面中添加一个button按钮并绑定事件，事件内容如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template lang=&quot;html&quot;&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        &amp;lt;button v-on:click=&quot;sendParentMsg&quot;&amp;gt;点我给父级传值&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
    export default {
        name:'recordIndex',
        methods:{
            sendParentMsg:function(){
                this.$emit('listenToChild','我这里是子组件发出的信息')
            }
        }
    }
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里用到了Vue自带的$emit方法，这个方法相当于广播，将内容发送出去。所需要的参数只有两个，一个是父级页面接受消息的方法另一个是想要传递的参数&lt;/p&gt;

&lt;p&gt;那么父级组件就需要在页面的子组件标签上定义并绑定一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;listenToChild&lt;/code&gt;的方法，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template lang=&quot;html&quot;&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        &amp;lt;recordIndex v-on:listenToChild=&quot;showChildMsg&quot;&amp;gt;&amp;lt;/recordIndex&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
    import recordIndex from './components/recordIndex'
    export default {
        name:'records',
        methods:{
            showChildMsg(msg){
                alert(msg)
            }
        },
        components:{recordIndex},
    }
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;绑定事件后，就指定了子级组件的事件名称，然后就需要把事件内容指定为父级组件中自定义的接受方法了，&lt;/p&gt;

&lt;p&gt;然后再父级页面中点击子组件按钮即可，如果成功会弹出子组件发出的信息。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;子组件中需要手动触发一个自定义事件
将需要传的值作为$emit的第二个参数，该值将作为实参传给父级响应自定义事件的方法
在父组件中注册子组件并在子组件标签上绑定对自定义事件的监听&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;同级组件之间的通信&quot;&gt;同级组件之间的通信&lt;/h3&gt;

&lt;p&gt;同级组件可以用中央事件总线的方式通信，原理就是使用一个全局的中间介质。需要使用到的方法有$emit发送，$on接收，$off结束监听。&lt;/p&gt;

&lt;p&gt;首先需要定义一个中间介质。&lt;/p&gt;

&lt;p&gt;可以在当前文件夹中定义，名为eventBus的js文件。文件内只创建一个Vue实例，它就承担起了组件之间通信的桥梁，也就是中央事件总线。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Vue from 'vue';
export default new Vue;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在a.js文件中建议写一个事件，这样可以清晰的控制。
在页面中引入之前定义好的介质文件eventBus.js。
事件方法中使用介质eventBus.$emit事件，将同级文件接收的自定义事件sendMsg和内容发射出去。
PS:$emit实例方法触发当前实例(这里的当前实例就是eventBus)上的事件,附加参数都会传给监听器回调。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
	&amp;lt;div class=&quot;timeline-demo&quot;&amp;gt;
		&amp;lt;button type=&quot;primary&quot; v-on:click='sendMsg'&amp;gt;给其他组件传值&amp;lt;/button&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;


&amp;lt;script&amp;gt;
    import eventBus from './eventBus'
    export default {
        name:'recordTimeLine',
        methods:{
            sendMsg(){
                var _this = this;
                eventBus.$emit('childMsg','my name is username')
            }
        }
    }
&amp;lt;/script&amp;gt;
&amp;lt;style lang=&quot;less&quot;&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在b.js文件中也需要在mounted中写一个用于接收的监听事件,用来监听a页面发射出的childMsg事件。
&lt;code class=&quot;highlighter-rouge&quot;&gt;$on&lt;/code&gt;：第一个参数是a页面$emit发射的第一个参数，第二个参数是一个回调方法，用于接收并操作$emit传递的参数
mounted:是一个Vue生命周期中的钩子函数，简单点说就类似于jquery的ready，Vue会在文档加载完毕后调用mounted函数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template lang=&quot;html&quot;&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
    import eventBus from './eventBus' 
    export default {
        name:'recordIndex',
		data(){
			return{
				message:'我是初始值'
			}
		},
        mounted(){
            let _this = this;
            eventBus.$on('childMsg',(msg) =&amp;gt; {
                _this.message = msg;
            })
        }
    }
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当两个组件写好后就需要用到一个放置两个组件的容器了，接下来创建一个index组件来存放a，b组件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template lang=&quot;html&quot;&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        &amp;lt;recordIndex&amp;gt;&amp;lt;/recordIndex&amp;gt;
        &amp;lt;recordTimeLine&amp;gt;&amp;lt;/recordTimeLine&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
    import recordTimeLine from './components/recordTimeLine'
    import recordIndex from './components/recordIndex'
    export default {
        name:'records',
        components:{recordTimeLine,recordIndex},
    }
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样当点击a组件的button时，触发了发射事件，b组件就可以接收并绑定显示到页面了&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;创建一个事件总线，例如demo中的eventBus，用它作为通信桥梁
在需要传值的组件中用eventBus.$emit触发一个自定义事件，并传递参数
在需要接收数据的组件中用eventBus.$on监听自定义事件，并在回调函数中处理传递过来的参数&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/08/23/vue2-component/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/08/23/vue2-component/</guid>
        
        <category>总结</category>
        
        <category>Vue2</category>
        
        
      </item>
    
      <item>
        <title>jQuery常用API</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;项目要重构了，来复习一下老版的jquery(项目兼容ie8，或者更低)…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;基本选择器&quot;&gt;基本选择器&lt;/h2&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(document);&lt;/code&gt;获取文档对象&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('#id');&lt;/code&gt;获取某个id元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('.className');&lt;/code&gt;获取某个class元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('input[name=username]');&lt;/code&gt;获取name为username的input元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('a:first');&lt;/code&gt;获取a标签的第一个&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('tr:odd');&lt;/code&gt;获取表格行的奇数行&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('#id:input');&lt;/code&gt;获取某个id元素中的input元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div:visible');&lt;/code&gt;获取div的状态是visible的元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div:gt(2)');&lt;/code&gt;获取除了前三个的所有div元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div:animated');&lt;/code&gt;获取div中处于animated状态的元素&lt;/p&gt;

&lt;h2 id=&quot;过滤器&quot;&gt;过滤器&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').has('p');&lt;/code&gt;div元素中所有的p元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').not('className');&lt;/code&gt;div元素集合中不是此className的元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').filter('className');&lt;/code&gt;div元素集合中class为className的元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').first();&lt;/code&gt;div元素集合中的第一个&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').eq(5);&lt;/code&gt;div元素集合中的第六个（下标0开始）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').next('p');&lt;/code&gt;div元素的后面的第一个p元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').parent();&lt;/code&gt;div元素的父级&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').closest('#id');&lt;/code&gt;离div元素最近的名为id的元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').childen();&lt;/code&gt;div元素的子集，子元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('div').siblings();&lt;/code&gt;div元素的兄弟元素，同级元素&lt;/p&gt;

&lt;h2 id=&quot;链式操作&quot;&gt;链式操作&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;在选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$('div').find('h3').eq(2).html('Hello');
分解开来，就是下面这样： 　　$('div') //找到div元素 　　　.find('h3') //选择其中的h3元素 　　　.eq(2) //选择第3个h3元素 　　　.html('Hello'); //将它的内容改为Hello
这是jQuery最令人称道、最方便的特点。它的原理在于每一步的jQuery操作，返回的都是一个jQuery对象，所以不同操作可以连在一起。

jQuery还提供了.end()方法，使得结果集可以后退一步：
$('div') 　　　.find('h3') 　　　.eq(2) 　　　.html('Hello') 　　　.end() //退回到选中所有的h3元素的那一步 　　　.eq(0) //选中第一个h3元素 　　　.html('World'); //将它的内容改为World
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;元素的取值和赋值&quot;&gt;元素的取值和赋值&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用同一个函数，来完成取值（getter）和赋值（setter），即”取值器”与”赋值器”合一。到底是取值还是赋值，由函数的参数决定。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('p').html();&lt;/code&gt;取出p标签内的代码内容&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('p').html('holle world');&lt;/code&gt;给指定的p标签赋值&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('p').text();&lt;/code&gt;取出p标签中的内容或赋值&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('p').val();&lt;/code&gt;取出p标签中的值或赋值&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('p').attr();&lt;/code&gt;取出p标签的属性或赋值&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('p').width();&lt;/code&gt;取出p标签的宽或赋值&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$('p').height();&lt;/code&gt;取出p标签的高或赋值&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要注意的是，如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的text内容）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;移动&quot;&gt;移动&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;提供两组方法，来操作元素在网页中的位置移动。一组方法是直接移动该元素，另一组方法是移动其他元素，使得目标元素达到我们想要的位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$('div1').insertAfter('div2');
第一种方法是使用.insertAfter()，把div1元素移动div2元素后面

$('div2').after('div1');
第二种方法是使用.after()，把div2元素加到div1元素前面
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;表面上看，这两种方法的效果是一样的，唯一的不同似乎只是操作视角的不同。但是实际上，它们有一个重大差别，那就是返回的元素不一样。第一种方法返回div1元素，第二种方法返回div2元素。你可以根据需要，选择到底使用哪一种方法。&lt;/p&gt;

&lt;p&gt;使用这种模式的操作方法，一共有四对：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.insertAfter()和.after()：在现存元素的外部，从后面插入元素 　　.insertBefore()和.before()：在现存元素的外部，从前面插入元素 　　.appendTo()和.append()：在现存元素的内部，从后面插入元素 　　.prependTo()和.prepend()：在现存元素的内部，从前面插入元素
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;元素的复制删除和创建&quot;&gt;元素的复制、删除和创建&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.clone();&lt;/code&gt;复制元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.remove();&lt;/code&gt;删除元素，但不会保留元素的事件，删的一干二净&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.detach();&lt;/code&gt;同为删除元素，但会保留被删除元素的事件，有利于重新插入文档时使用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.empty();&lt;/code&gt;清空元素内的内容&lt;/p&gt;

&lt;p&gt;$(‘div1’)&lt;code class=&quot;highlighter-rouge&quot;&gt;.append&lt;/code&gt;(‘div2’);追加元素到指定元素之后&lt;/p&gt;

&lt;h2 id=&quot;工具方法&quot;&gt;工具方法&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;除了对选中的元素进行操作以外，还提供一些与元素无关的工具方法（utility）。不必选中元素，就可以直接使用这些方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你懂得Javascript语言的继承原理，那么就能理解工具方法的实质。它是定义在jQuery构造函数上的方法，即&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery.method()&lt;/code&gt;，所以可以直接使用。而那些操作元素的方法，是定义在构造函数的&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype对象&lt;/code&gt;上的方法，即&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery.prototype.method()&lt;/code&gt;，所以必须生成实例（即选中元素）后使用。如果不理解这种区别，问题也不大，只要把工具方法理解成，是像javascript&lt;code class=&quot;highlighter-rouge&quot;&gt;原生函数&lt;/code&gt;那样，可以直接使用的方法就行了。&lt;/p&gt;

&lt;p&gt;常用的工具方法：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.trim();&lt;/code&gt;清空字符串两端的空格&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.each();&lt;/code&gt;循环数组或对象&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.inArray();&lt;/code&gt;返回目标所在数组中的位置，如果不存在返回-1&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.grep();&lt;/code&gt;返回数组中符合某种标准的元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.extend();&lt;/code&gt;将多个对象合并为一个对象&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.makeArray();&lt;/code&gt;将对象转化为数组&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.type();&lt;/code&gt;判断对象的类型（函数对象，日期对象，正则对象，数组对象等等）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.isArray();&lt;/code&gt;判断是否是标准的数组&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.isEmptyObject();&lt;/code&gt;判断目标对象是否是空的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.isFunction();&lt;/code&gt;判断是否是函数对象&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.isPlainObject();&lt;/code&gt;判断目标对象是否使用’{}’或’new Object()’ 创建出的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.support();&lt;/code&gt;判断浏览器是否支持某种特性&lt;/p&gt;

&lt;h2 id=&quot;事件操作&quot;&gt;事件操作&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;jquery的设计思想就是把&lt;code class=&quot;highlighter-rouge&quot;&gt;事件绑定到元素上&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;事件列表：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.click();&lt;/code&gt;单击事件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.change();&lt;/code&gt;当指定元素内容改变后触发&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.blur();&lt;/code&gt;光标离开失去焦点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.focus();&lt;/code&gt;获取焦点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.hover();&lt;/code&gt;同时为mouseenter和mouseleave事件处理函数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.keyup();&lt;/code&gt;键盘抬起，松开键盘时触发&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.keydown();&lt;/code&gt;按下键盘时触发&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.keypress();&lt;/code&gt;按下键盘，长时间按键后将返回多个事件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.mousedown();&lt;/code&gt;按下鼠标&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.mouseup();&lt;/code&gt;松开鼠标&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.mouseenter();&lt;/code&gt;鼠标进入到指定元素内，进入子元素不会触发&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.mouseleave();&lt;/code&gt;鼠标离开指定元素，离开子元素不触发&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.mousemove();&lt;/code&gt;鼠标在指定元素内移动&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.mouseout();&lt;/code&gt;鼠标离开，离开子元素也会触发&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.mouseover();&lt;/code&gt;鼠标进入，进入子元素也会触发&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.focusin();&lt;/code&gt;子元素获得焦点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.focusout();&lt;/code&gt;子元素失去焦点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.dblclick();&lt;/code&gt;双击事件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.load();&lt;/code&gt;元素加载完毕&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.ready();&lt;/code&gt;dom加载完成&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.scroll();&lt;/code&gt;滚动条位置的变化&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.select();&lt;/code&gt;用户选中文本框的内容&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.submit();&lt;/code&gt;提交表单&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.toggle();&lt;/code&gt;根据鼠标点击的次数，依次运行多个函数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.unload();&lt;/code&gt;用户离开页面时触发&lt;/p&gt;

&lt;p&gt;以上事件在jquery中都是用&lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;方法绑定的，它可以更灵活的控制事件。&lt;/p&gt;

&lt;p&gt;比如你可以为多个事件绑定同一个函数：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click change'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//同时绑定click和change事件&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　　　&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有时你指向让他运行一次，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;one()&lt;/code&gt;方法&lt;/p&gt;

&lt;p&gt;``javascript`
    $(“p”).one(“click”, function() {
　　　　alert(“Hello”); //只运行一次，以后的点击不会运行
　　});&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
可使用 `.unbind()` 解除事件绑定

所有的事件处理函数，都可以接受一个事件对象(event object)作为参数，比如下面例子中的'e':

```javascript
    $(&quot;p&quot;).click(function(e) {
        //event 事件对象
　　　　alert(e.type); // &quot;click&quot;
　　});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个event事件对象有许多的有用的方法和属性可以使用：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event.pageX&lt;/code&gt;  事件发生时，鼠标距离网页左上角的水平定位&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event.pageY&lt;/code&gt;  事件发生时，鼠标距离网页左上角的垂直定位&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event.type&lt;/code&gt;   事件的类型&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event.target&lt;/code&gt; 事件针对的网页元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event.which&lt;/code&gt;  按下了哪一个键&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event.data&lt;/code&gt;   在事件上绑定数据，然后传入事件处理函数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event.stopPropagation()&lt;/code&gt;  阻止冒泡&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;event.preventDefault()&lt;/code&gt;   阻止默认行为&lt;/p&gt;

&lt;p&gt;在事件的处理过程中，可以使用this关键字，返回事件针对的dom元素：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'href'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'evil'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//如果确认为有害链接&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　　　&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//阻止打开&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　　　&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'evil'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//加上表示有害的class&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有两种方法可以出发一个事件，一种是直接触发，另一种是使用trigger()或者trigger Handler()：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$('id').click();
$('id').trigger('click');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;特殊效果&quot;&gt;特殊效果&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.show();&lt;/code&gt; 显示元素 相当于display:block&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.hide();&lt;/code&gt; 隐藏元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.fadeIn();&lt;/code&gt; 淡入&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.fadeOut();&lt;/code&gt; 淡出&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.fadeTo();&lt;/code&gt;调整透明度&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.slideDown();&lt;/code&gt; 向下打开&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.slideUp();&lt;/code&gt; 向上卷起&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.slideToggle();&lt;/code&gt; 根据当前元素的情况打开或卷起  (slideDown,slideUp)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.toggle();&lt;/code&gt;根据当前元素的情况显示或隐藏元素  （show,hide）&lt;/p&gt;

&lt;p&gt;除了&lt;code class=&quot;highlighter-rouge&quot;&gt;.show()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;.hide()&lt;/code&gt;外，其他的特效默认都会有400ms(毫秒),但是你可以改变这个设置。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$('id').fadeIn(300);  300毫秒内淡入
$('id').fadeIn('slow');  换面的淡出
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;特效结束后还能指定接下来运行的函数:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//更复杂的特效，可以用.animate()自定义。&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+=50&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//不断右移&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//指定透明度&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 持续时间&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'done!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//回调函数&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.stop()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;.delay()&lt;/code&gt;用来停止或延缓特效的执行&lt;/p&gt;

&lt;p&gt;$.fx.off如果设置为true，则关闭页面特效&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/08/23/jqueryAPI/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/08/23/jqueryAPI/</guid>
        
        <category>总结</category>
        
        <category>jQuery</category>
        
        
      </item>
    
      <item>
        <title>git突然无法连接提示公钥或密码错误的坑</title>
        <description>&lt;p&gt;ssh配置文件莫名其妙的出现了问题，可能由于在电脑上乱试版本管理工具导致的吧。&lt;/p&gt;

&lt;p&gt;然后就是各种调，因为当前电脑会链接github和gitlab以及服务器，所以本地的ssh有点多，设置起来也费点时间。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;那么今天遇到的问题就坑了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ssh -T git@github.com		正常连接&lt;/li&gt;
  &lt;li&gt;git pull origin master	提示密码不对无法连接&lt;/li&gt;
  &lt;li&gt;各种查看后发现项目.git文件中的config文件中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;remote &quot;origin&quot;&lt;/code&gt;地址有误一个&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;被改成了&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;。导致找不到目录，我一看所有我之前用SourceTree配置过的项目都存在这样的情况。估计是当初病急乱投医乱配导致的。以下是处理方法&lt;/li&gt;
  &lt;li&gt;可以先在指定的项目中 &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt; 看到远程连接的地址，如果和你github中项目的ssh方式提供的网址一下那就不用往下看了。（这里的remote建议使用ssh的方式，就不用输密码了）&lt;/li&gt;
  &lt;li&gt;在命令行运行&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote rm origin&lt;/code&gt; 删除远程连接&lt;/li&gt;
  &lt;li&gt;在命令行运行&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin ssh方式的github项目地址&lt;/code&gt; 重新添加一下即可&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;前提：你要安装git，windowsCMD无法直接运行ssh命令。如果你之前配置过要重新配置相同网站的sshkey可以吧.ssh文件夹中的&lt;code class=&quot;highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt;改名或删掉，以免影响新的key&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以github为例&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先需要直接打开gitbash，在命令行中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa -C &quot;建议填注册网站时填写的邮箱&quot;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ssh-keygen -t rsa -C “841489295@qq.com”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后会询问你生成的文件名，你可以指定也可以不指定（多ssh管理时建议指定）&lt;/p&gt;

&lt;p&gt;然后回车就可以了，他就会在&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\电脑用户名\.ssh&lt;/code&gt;生成一个你指定名称的rsa文件&lt;/p&gt;

&lt;p&gt;取出已&lt;code class=&quot;highlighter-rouge&quot;&gt;.pub&lt;/code&gt;为后缀的文件中的内容，添加到你的github或者gitlab以及其他以git版本管理为功能的网站中（一般叫SSHKey）&lt;/p&gt;

&lt;p&gt;添加后还有重要的一步，就是测试一下是否能连接成功，在命令行输入&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -T git@github.com&lt;/code&gt;, 会让你输入网站登录的密码。显示如下即为正确。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh -T git@github.com
The authenticity of host 'github.com (192.30.255.112)' can't be established.
RSA key fingerprint is SHA256:nThbg........
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,192.30.255.112' (RSA) to the list of known hosts.
Enter passphrase for key 'C:\\Users\\acer\\.ssh\\github-rsa':
Hi 你github上的用户名! You've successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;操作完成后.ssh文件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt;文件中会写入一条你刚刚连接网站的记录。&lt;/p&gt;

&lt;p&gt;多sshkey使用时，还有更重要的一步，需要配置.ssh文件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt;文件，&lt;code class=&quot;highlighter-rouge&quot;&gt;每多一个sshkey就要配置一次&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host github.com              建议输入你的网站名  不建议重复
HostName github.com			 输入你网站的域名，既你克隆项目时，使用的ssh方式中url里@符号后面的地址
IdentityFile C:\\Users\\acer\\.ssh\\github-rsa			你的rsa文件地址
PreferredAuthentications publickey						照抄，意思是已公钥的方式
User handsameliu			 用户名，可以填你网站的用户名，也可以填网址 不建议重复
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完成后就可以正常clone了。&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/08/23/gitIssues/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/08/23/gitIssues/</guid>
        
        <category>总结</category>
        
        <category>git</category>
        
        <category>ssh</category>
        
        
      </item>
    
      <item>
        <title>test markdown</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;注意文档格式，建议utf-8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;可用的标签&quot;&gt;可用的标签&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;粗体&lt;/strong&gt;testtesttesttesttesttesttesttesttesttesttesttesttesttest&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;粗体子集1&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;粗体子集2&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;粗体子集3&quot;&gt;&lt;strong&gt;粗体子集3&lt;/strong&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;hexo next （&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt;）一种用于截取一部分文段段落显示&lt;code class=&quot;highlighter-rouge&quot;&gt;查看所有&lt;/code&gt;标签，推荐使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;markdown简介&quot;&gt;Markdown简介&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— &lt;a href=&quot;https://zh.wikipedia.org/wiki/Markdown&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;代码块&quot;&gt;代码块&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@requires_authorization&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;somefunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''A docstring'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# interesting&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Greater'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''interpreter
... prompt'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;表格&quot;&gt;表格&lt;/h3&gt;
&lt;p&gt;| Item      |    Value | Qty  |
| :——– | ——–:| :–: |
| Computer  | 1600 USD |  5   |
| Phone     |   12 USD |  12  |
| Pipe      |    1 USD | 234  |&lt;/p&gt;

&lt;h3 id=&quot;复选框&quot;&gt;复选框&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;- [ ]&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;- [x]&lt;/code&gt; 语法可以创建复选框，实现 todo-list 等功能。例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[x] 已完成事项&lt;/li&gt;
  &lt;li&gt;[ ] 待办事项1&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;  可以使用粗体和斜体&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;反馈与建议&quot;&gt;反馈与建议&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;链接：&lt;a href=&quot;http://www.google.com&quot; title=&quot;网站链接target&quot;&gt;@链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 05 Jul 2017 00:00:00 +0800</pubDate>
        <link>/jekyll_blog/2017/07/05/testing/</link>
        <guid isPermaLink="true">/jekyll_blog/2017/07/05/testing/</guid>
        
        <category>Testing</category>
        
        
      </item>
    
  </channel>
</rss>
